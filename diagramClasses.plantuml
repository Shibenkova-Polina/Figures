@startuml
skinparam classAttributeIconSize 0

class Circle {
  - points: Point[]
  + rightFigure(): boolean
  + area(): void
  + perimeter(): void
}
class Cone {
  - points: Point[]
  + area(): void
  + rightFigure(): boolean
}
class Cylinder {
  - points: Point[]
  + rightFigure(): boolean
  + area(): void
}
class Figure {
  + area(): void
  + rightFigure(): boolean
  + perimeter(): void
}
class Main {
  + chooseFigure(Scanner): Figure
  + inputCoordinate(Scanner, Figure): ArrayList<Point>
  + validate(Figure, Point[]): boolean
  + main(String[]): void
  + createFigure(Figure, Point[]): Figure
}
class Parallelogram {
  - points: Point[]
  + area(): void
  + rightFigure(): boolean
  + perimeter(): void
}
class Point {
  - y: int
  - z: int
  - x: int
  + getZ(): int
  + getX(): int
  + getY(): int
}
class Polygon {
  - points: Point[]
  + rightFigure(): boolean
  + area(): void
  + perimeter(): void
}
class Rectangle {
  - points: Point[]
  + perimeter(): void
  + area(): void
  + rightFigure(): boolean
}
class Sphere {
  - points: Point[]
  + rightFigure(): boolean
  + area(): void
}
class Square {
  - points: Point[]
  + area(): void
  + perimeter(): void
  + rightFigure(): boolean
}
class Triangle {
  - points: Point[]
  + perimeter(): void
  + rightFigure(): boolean
  + area(): void
}
class TruncatedSphere {
  - points: Point[]
  + area(): void
  + rightFigure(): boolean
}

Circle --|> Figure
Cone --|> Figure
Cylinder --|> Figure
Parallelogram --|> Figure
Polygon --|> Figure
Rectangle --|> Figure
Sphere --|> Figure
Square --|> Figure
Triangle --|> Figure
TruncatedSphere --|> Figure

Main ..> Cylinder
Main ..> Cone
Main ..> Circle
Main ..> Parallelogram
Main ..> Rectangle
Main ..> Polygon
Main ..> Sphere
Main ..> Square
Main ..> Triangle
Main ..> TruncatedSphere
Main ..> Figure
Main ..> Point

Point --* Circle
Point --* Cone
Point --* Cylinder
Point --* Parallelogram
Point --* Polygon
Point --* Rectangle
Point --* Square
Point --* Sphere
Point --* TruncatedSphere
Point --* Triangle
@enduml
